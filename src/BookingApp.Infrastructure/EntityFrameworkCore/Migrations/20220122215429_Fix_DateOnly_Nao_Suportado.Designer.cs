// <auto-generated />
using System;
using BookingApp.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingApp.Server.Migrations
{
    [DbContext(typeof(BookingAppDbContext))]
    [Migration("20220122215429_Fix_DateOnly_Nao_Suportado")]
    partial class Fix_DateOnly_Nao_Suportado
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingApp.Bookings.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Finish")
                        .HasColumnType("date");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("ReservationCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Código de reserva externo");

                    b.Property<string>("ReservedTo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Nome do responsável");

                    b.Property<DateOnly>("Start")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("booking_idx_place_filter");

                    b.HasIndex("ReservationCode")
                        .HasDatabaseName("booking_idx_searh_by_code");

                    b.HasIndex("ReservedTo")
                        .HasDatabaseName("booking_idx_search_by_name");

                    b.HasIndex("Start", "Finish")
                        .HasDatabaseName("booking_idx_time_search");

                    b.ToTable("bookings", "bookings");
                });

            modelBuilder.Entity("BookingApp.Bookings.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasComment("Tipo de contato relacionado");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Dado do contato");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("contact_info", "bookings");
                });

            modelBuilder.Entity("BookingApp.Payments.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasComment("Nome da conta contábil");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("accounts_idx_un_name");

                    b.ToTable("accounts", "payments");
                });

            modelBuilder.Entity("BookingApp.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer")
                        .HasComment("Se essa transação está vinculada a uma locação.");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("O que aconteceu...");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer")
                        .HasComment("Imóvel relacionado a transação.");

                    b.Property<DateTime>("When")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "When")
                        .HasDatabaseName("payments_idx_search_by_account");

                    b.HasIndex("BookingId", "When")
                        .HasDatabaseName("payments_idx_search_by_booking");

                    b.HasIndex("PlaceId", "When")
                        .HasDatabaseName("payments_idx_search_by_place");

                    b.ToTable("payments", "payments");
                });

            modelBuilder.Entity("BookingApp.Places.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasComment("Nome do local/casa a reservar");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("places_idx_un_autocomplete");

                    b.ToTable("places", "places");
                });

            modelBuilder.Entity("BookingApp.Bookings.Booking", b =>
                {
                    b.HasOne("BookingApp.Places.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BookingApp.Bookings.ContactInfo", b =>
                {
                    b.HasOne("BookingApp.Bookings.Booking", "Booking")
                        .WithMany("Contacts")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BookingApp.Payments.Payment", b =>
                {
                    b.HasOne("BookingApp.Payments.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingApp.Bookings.Booking", "Booking")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BookingApp.Places.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booking");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("BookingApp.Bookings.Booking", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
